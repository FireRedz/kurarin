#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input /run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl --output /run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.h --slang glsl330:glsl100:glsl300es:hlsl5:metal_macos:metal_ios:metal_sim:wgpu

    Overview:

        Shader program 'fuck':
            Get shader desc: fuck_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_in_position = 0
                    ATTR_vs_centre = 1
                    ATTR_vs_texture_coord = 2
            Fragment shader: fs
                Uniform block 'fs_params':
                    C struct: fs_params_t
                    Bind slot: SLOT_fs_params = 0
                Image 'texture_in':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_texture_in = 0


    Shader descriptor structs:

        sg_shader fuck = sg_make_shader(fuck_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_in_position] = { ... },
                    [ATTR_vs_centre] = { ... },
                    [ATTR_vs_texture_coord] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_texture_in = 0;

    Bind slot and C-struct for uniform block 'fs_params':

        fs_params_t fs_params = {
            .col_border = ...;
            .bullshit = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fs_params, &SG_RANGE(fs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_vs_in_position (0)
#define ATTR_vs_centre (1)
#define ATTR_vs_texture_coord (2)
#define SLOT_texture_in (0)
#define SLOT_fs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_params_t {
    float col_border[4];
    float bullshit[4];
} fs_params_t;
#pragma pack(pop)
/*
    #version 330
    
    layout(location = 0) in vec3 in_position;
    layout(location = 1) in vec3 centre;
    out vec2 texture_coord_out;
    layout(location = 2) in vec2 texture_coord;
    
    void main()
    {
        gl_Position = mat4(vec4(0.00236687925644218921661376953125, 0.0, 0.0, 0.0), vec4(0.0, -0.0042074620723724365234375, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(-0.605774223804473876953125, 0.8076989650726318359375, 0.0, 1.0)) * ((mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)) * vec4(in_position - centre, 1.0)) + vec4(centre, 0.0));
        texture_coord_out = texture_coord;
    }
    
*/
static const char vs_source_glsl330[621] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x69,0x6e,0x5f,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x33,0x20,0x63,0x65,0x6e,0x74,0x72,0x65,0x3b,0x0a,0x6f,0x75,0x74,
    0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,
    0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,
    0x6f,0x72,0x64,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x65,0x63,0x34,0x28,
    0x30,0x2e,0x30,0x30,0x32,0x33,0x36,0x36,0x38,0x37,0x39,0x32,0x35,0x36,0x34,0x34,
    0x32,0x31,0x38,0x39,0x32,0x31,0x36,0x36,0x31,0x33,0x37,0x36,0x39,0x35,0x33,0x31,
    0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x2d,0x30,
    0x2e,0x30,0x30,0x34,0x32,0x30,0x37,0x34,0x36,0x32,0x30,0x37,0x32,0x33,0x37,0x32,
    0x34,0x33,0x36,0x35,0x32,0x33,0x34,0x33,0x37,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,
    0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x2c,
    0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,
    0x20,0x76,0x65,0x63,0x34,0x28,0x2d,0x30,0x2e,0x36,0x30,0x35,0x37,0x37,0x34,0x32,
    0x32,0x33,0x38,0x30,0x34,0x34,0x37,0x33,0x38,0x37,0x36,0x39,0x35,0x33,0x31,0x32,
    0x35,0x2c,0x20,0x30,0x2e,0x38,0x30,0x37,0x36,0x39,0x38,0x39,0x36,0x35,0x30,0x37,
    0x32,0x36,0x33,0x31,0x38,0x33,0x35,0x39,0x33,0x37,0x35,0x2c,0x20,0x30,0x2e,0x30,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x28,0x28,0x6d,0x61,0x74,0x34,
    0x28,0x76,0x65,0x63,0x34,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,
    0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,
    0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,
    0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,
    0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,
    0x69,0x6e,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x2d,0x20,0x63,0x65,
    0x6e,0x74,0x72,0x65,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2b,0x20,0x76,0x65,
    0x63,0x34,0x28,0x63,0x65,0x6e,0x74,0x72,0x65,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,
    0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 fs_params[2];
    uniform sampler2D texture_in;
    
    in vec2 texture_coord_out;
    layout(location = 0) out vec4 color;
    
    void main()
    {
        color = (texture(texture_in, texture_coord_out) * fs_params[1].x) * fs_params[0];
    }
    
*/
static const char fs_source_glsl330[241] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x69,0x6e,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,
    0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x69,0x6e,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x29,0x20,0x2a,0x20,0x66,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2e,0x78,0x29,0x20,0x2a,0x20,0x66,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
/*
    #version 100
    
    attribute vec3 in_position;
    attribute vec3 centre;
    varying vec2 texture_coord_out;
    attribute vec2 texture_coord;
    
    void main()
    {
        gl_Position = mat4(vec4(0.00236687925644218921661376953125, 0.0, 0.0, 0.0), vec4(0.0, -0.0042074620723724365234375, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(-0.605774223804473876953125, 0.8076989650726318359375, 0.0, 1.0)) * ((mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)) * vec4(in_position - centre, 1.0)) + vec4(centre, 0.0));
        texture_coord_out = texture_coord;
    }
    
*/
static const char vs_source_glsl100[583] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x0a,0x61,0x74,
    0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,0x63,0x33,0x20,0x69,0x6e,0x5f,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x61,0x74,0x74,0x72,0x69,0x62,
    0x75,0x74,0x65,0x20,0x76,0x65,0x63,0x33,0x20,0x63,0x65,0x6e,0x74,0x72,0x65,0x3b,
    0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x3b,
    0x0a,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,0x63,0x32,0x20,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x6d,0x61,0x74,0x34,0x28,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x30,0x32,0x33,
    0x36,0x36,0x38,0x37,0x39,0x32,0x35,0x36,0x34,0x34,0x32,0x31,0x38,0x39,0x32,0x31,
    0x36,0x36,0x31,0x33,0x37,0x36,0x39,0x35,0x33,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,
    0x63,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x2d,0x30,0x2e,0x30,0x30,0x34,0x32,0x30,
    0x37,0x34,0x36,0x32,0x30,0x37,0x32,0x33,0x37,0x32,0x34,0x33,0x36,0x35,0x32,0x33,
    0x34,0x33,0x37,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,
    0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,
    0x2d,0x30,0x2e,0x36,0x30,0x35,0x37,0x37,0x34,0x32,0x32,0x33,0x38,0x30,0x34,0x34,
    0x37,0x33,0x38,0x37,0x36,0x39,0x35,0x33,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x38,
    0x30,0x37,0x36,0x39,0x38,0x39,0x36,0x35,0x30,0x37,0x32,0x36,0x33,0x31,0x38,0x33,
    0x35,0x39,0x33,0x37,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x29,0x20,0x2a,0x20,0x28,0x28,0x6d,0x61,0x74,0x34,0x28,0x76,0x65,0x63,0x34,0x28,
    0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,
    0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,
    0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x69,0x6e,0x5f,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x2d,0x20,0x63,0x65,0x6e,0x74,0x72,0x65,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x65,0x6e,
    0x74,0x72,0x65,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,
    0x74,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,
    0x64,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 100
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 fs_params[2];
    uniform highp sampler2D texture_in;
    
    varying highp vec2 texture_coord_out;
    
    void main()
    {
        gl_FragData[0] = (texture2D(texture_in, texture_coord_out) * fs_params[1].x) * fs_params[0];
    }
    
*/
static const char fs_source_glsl100[284] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x70,0x72,0x65,
    0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x66,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x3b,0x0a,0x75,0x6e,0x69,
    0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6e,0x3b,
    0x0a,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,
    0x72,0x64,0x5f,0x6f,0x75,0x74,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x46,0x72,
    0x61,0x67,0x44,0x61,0x74,0x61,0x5b,0x30,0x5d,0x20,0x3d,0x20,0x28,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x32,0x44,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,
    0x6e,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,
    0x5f,0x6f,0x75,0x74,0x29,0x20,0x2a,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x31,0x5d,0x2e,0x78,0x29,0x20,0x2a,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x30,0x5d,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    
    layout(location = 0) in vec3 in_position;
    layout(location = 1) in vec3 centre;
    out vec2 texture_coord_out;
    layout(location = 2) in vec2 texture_coord;
    
    void main()
    {
        gl_Position = mat4(vec4(0.00236687925644218921661376953125, 0.0, 0.0, 0.0), vec4(0.0, -0.0042074620723724365234375, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(-0.605774223804473876953125, 0.8076989650726318359375, 0.0, 1.0)) * ((mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)) * vec4(in_position - centre, 1.0)) + vec4(centre, 0.0));
        texture_coord_out = texture_coord;
    }
    
*/
static const char vs_source_glsl300es[624] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x69,0x6e,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x63,0x65,0x6e,0x74,0x72,0x65,0x3b,0x0a,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x65,
    0x63,0x34,0x28,0x30,0x2e,0x30,0x30,0x32,0x33,0x36,0x36,0x38,0x37,0x39,0x32,0x35,
    0x36,0x34,0x34,0x32,0x31,0x38,0x39,0x32,0x31,0x36,0x36,0x31,0x33,0x37,0x36,0x39,
    0x35,0x33,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,
    0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x2c,
    0x20,0x2d,0x30,0x2e,0x30,0x30,0x34,0x32,0x30,0x37,0x34,0x36,0x32,0x30,0x37,0x32,
    0x33,0x37,0x32,0x34,0x33,0x36,0x35,0x32,0x33,0x34,0x33,0x37,0x35,0x2c,0x20,0x30,
    0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x30,
    0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x2d,0x30,0x2e,0x36,0x30,0x35,0x37,
    0x37,0x34,0x32,0x32,0x33,0x38,0x30,0x34,0x34,0x37,0x33,0x38,0x37,0x36,0x39,0x35,
    0x33,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x38,0x30,0x37,0x36,0x39,0x38,0x39,0x36,
    0x35,0x30,0x37,0x32,0x36,0x33,0x31,0x38,0x33,0x35,0x39,0x33,0x37,0x35,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x28,0x28,0x6d,
    0x61,0x74,0x34,0x28,0x76,0x65,0x63,0x34,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,
    0x63,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,
    0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,
    0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,
    0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,
    0x63,0x34,0x28,0x69,0x6e,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x2d,
    0x20,0x63,0x65,0x6e,0x74,0x72,0x65,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2b,
    0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x65,0x6e,0x74,0x72,0x65,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x20,0x3d,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 fs_params[2];
    uniform highp sampler2D texture_in;
    
    in highp vec2 texture_coord_out;
    layout(location = 0) out highp vec4 color;
    
    void main()
    {
        color = (texture(texture_in, texture_coord_out) * fs_params[1].x) * fs_params[0];
    }
    
*/
static const char fs_source_glsl300es[314] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x3b,0x0a,
    0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x69,0x6e,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x32,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,
    0x5f,0x6f,0x75,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6e,0x2c,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,
    0x75,0x74,0x29,0x20,0x2a,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x31,0x5d,0x2e,0x78,0x29,0x20,0x2a,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x30,0x5d,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    static float4 gl_Position;
    static float3 in_position;
    static float3 centre;
    static float2 texture_coord_out;
    static float2 texture_coord;
    
    struct SPIRV_Cross_Input
    {
        float3 in_position : TEXCOORD0;
        float3 centre : TEXCOORD1;
        float2 texture_coord : TEXCOORD2;
    };
    
    struct SPIRV_Cross_Output
    {
        float2 texture_coord_out : TEXCOORD0;
        float4 gl_Position : SV_Position;
    };
    
    #line 44 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
    void vert_main()
    {
        gl_Position = mul(mul(float4(in_position - centre, 1.0f), float4x4(float4(1.0f, 0.0f, 0.0f, 0.0f), float4(0.0f, 1.0f, 0.0f, 0.0f), float4(0.0f, 0.0f, 1.0f, 0.0f), float4(0.0f, 0.0f, 0.0f, 1.0f))) + float4(centre, 0.0f), float4x4(float4(0.00236687925644218921661376953125f, 0.0f, 0.0f, 0.0f), float4(0.0f, -0.0042074620723724365234375f, 0.0f, 0.0f), float4(0.0f, 0.0f, 1.0f, 0.0f), float4(-0.605774223804473876953125f, 0.8076989650726318359375f, 0.0f, 1.0f)));
    #line 44 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
        texture_coord_out = texture_coord;
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        in_position = stage_input.in_position;
        centre = stage_input.centre;
        texture_coord = stage_input.texture_coord;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.texture_coord_out = texture_coord_out;
        return stage_output;
    }
*/
static const char vs_source_hlsl5[1438] = {
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x69,0x6e,0x5f,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x63,0x65,0x6e,0x74,0x72,0x65,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x3b,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,
    0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,
    0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x69,0x6e,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x54,
    0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x20,0x63,0x65,0x6e,0x74,0x72,0x65,0x20,0x3a,0x20,0x54,0x45,
    0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,
    0x64,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x20,0x3a,0x20,0x54,0x45,
    0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x34,0x20,0x22,0x2f,0x72,0x75,
    0x6e,0x2f,0x6d,0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,0x6e,
    0x64,0x20,0x44,0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,
    0x64,0x65,0x6d,0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,
    0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,0x67,
    0x6c,0x73,0x6c,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x75,0x6c,0x28,0x6d,0x75,
    0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x5f,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x2d,0x20,0x63,0x65,0x6e,0x74,0x72,0x65,0x2c,0x20,0x31,
    0x2e,0x30,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x28,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x28,0x31,0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,
    0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x2c,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,
    0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x2c,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,
    0x2c,0x20,0x31,0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x2c,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,
    0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x29,0x29,0x20,
    0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,0x65,0x6e,0x74,0x72,0x65,0x2c,
    0x20,0x30,0x2e,0x30,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,
    0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,0x30,0x32,0x33,0x36,0x36,
    0x38,0x37,0x39,0x32,0x35,0x36,0x34,0x34,0x32,0x31,0x38,0x39,0x32,0x31,0x36,0x36,
    0x31,0x33,0x37,0x36,0x39,0x35,0x33,0x31,0x32,0x35,0x66,0x2c,0x20,0x30,0x2e,0x30,
    0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x2c,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,0x66,0x2c,0x20,0x2d,0x30,0x2e,
    0x30,0x30,0x34,0x32,0x30,0x37,0x34,0x36,0x32,0x30,0x37,0x32,0x33,0x37,0x32,0x34,
    0x33,0x36,0x35,0x32,0x33,0x34,0x33,0x37,0x35,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,
    0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x30,0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,
    0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x2d,0x30,0x2e,0x36,0x30,0x35,0x37,0x37,0x34,0x32,0x32,0x33,0x38,0x30,0x34,0x34,
    0x37,0x33,0x38,0x37,0x36,0x39,0x35,0x33,0x31,0x32,0x35,0x66,0x2c,0x20,0x30,0x2e,
    0x38,0x30,0x37,0x36,0x39,0x38,0x39,0x36,0x35,0x30,0x37,0x32,0x36,0x33,0x31,0x38,
    0x33,0x35,0x39,0x33,0x37,0x35,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,
    0x2e,0x30,0x66,0x29,0x29,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x34,
    0x20,0x22,0x2f,0x72,0x75,0x6e,0x2f,0x6d,0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,
    0x6b,0x6f,0x2f,0x32,0x6e,0x64,0x20,0x44,0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,
    0x65,0x63,0x74,0x73,0x2f,0x64,0x65,0x6d,0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,
    0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,
    0x64,0x65,0x72,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x20,
    0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,
    0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x6e,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x69,0x6e,0x5f,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x65,0x6e,0x74,
    0x72,0x65,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,
    0x2e,0x63,0x65,0x6e,0x74,0x72,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,
    0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x20,0x3d,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    cbuffer fs_params : register(b0)
    {
        float4 _24_col_border : packoffset(c0);
        float4 _24_bullshit : packoffset(c1);
    };
    
    Texture2D<float4> texture_in : register(t0);
    SamplerState _texture_in_sampler : register(s0);
    
    static float2 texture_coord_out;
    static float4 color;
    
    struct SPIRV_Cross_Input
    {
        float2 texture_coord_out : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 color : SV_Target0;
    };
    
    #line 16 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
    void frag_main()
    {
    #line 16 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
    #line 17 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
        color = (texture_in.Sample(_texture_in_sampler, texture_coord_out) * _24_bullshit.x) * _24_col_border;
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        texture_coord_out = stage_input.texture_coord_out;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.color = color;
        return stage_output;
    }
*/
static const char fs_source_hlsl5[1012] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,
    0x34,0x5f,0x63,0x6f,0x6c,0x5f,0x62,0x6f,0x72,0x64,0x65,0x72,0x20,0x3a,0x20,0x70,
    0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,0x34,0x5f,0x62,0x75,
    0x6c,0x6c,0x73,0x68,0x69,0x74,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,
    0x73,0x65,0x74,0x28,0x63,0x31,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x54,0x65,0x78,
    0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6e,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,
    0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x69,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,
    0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x3b,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x20,0x3a,0x20,0x54,0x45,0x58,
    0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,
    0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,
    0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x31,0x36,0x20,0x22,0x2f,0x72,0x75,0x6e,0x2f,0x6d,0x65,0x64,0x69,0x61,0x2f,
    0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,0x6e,0x64,0x20,0x44,0x69,0x73,0x6b,0x2f,0x50,
    0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x64,0x65,0x6d,0x65,0x6e,0x74,0x69,0x61,
    0x2f,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,
    0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x36,0x20,0x22,0x2f,0x72,0x75,0x6e,0x2f,0x6d,
    0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,0x6e,0x64,0x20,0x44,
    0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x64,0x65,0x6d,
    0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,
    0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,0x67,0x6c,0x73,0x6c,
    0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x37,0x20,0x22,0x2f,0x72,0x75,0x6e,
    0x2f,0x6d,0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,0x6e,0x64,
    0x20,0x44,0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x64,
    0x65,0x6d,0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,
    0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,0x67,0x6c,
    0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6e,0x2e,0x53,0x61,0x6d,0x70,
    0x6c,0x65,0x28,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6e,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x29,0x20,0x2a,0x20,0x5f,0x32,0x34,
    0x5f,0x62,0x75,0x6c,0x6c,0x73,0x68,0x69,0x74,0x2e,0x78,0x29,0x20,0x2a,0x20,0x5f,
    0x32,0x34,0x5f,0x63,0x6f,0x6c,0x5f,0x62,0x6f,0x72,0x64,0x65,0x72,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,
    0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,
    0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,
    0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,
    0x0a,0x7d,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float2 texture_coord_out [[user(locn0)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float3 in_position [[attribute(0)]];
        float3 centre [[attribute(1)]];
        float2 texture_coord [[attribute(2)]];
    };
    
    #line 44 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
    vertex main0_out main0(main0_in in [[stage_in]])
    {
        main0_out out = {};
        out.gl_Position = float4x4(float4(0.00236687925644218921661376953125, 0.0, 0.0, 0.0), float4(0.0, -0.0042074620723724365234375, 0.0, 0.0), float4(0.0, 0.0, 1.0, 0.0), float4(-0.605774223804473876953125, 0.8076989650726318359375, 0.0, 1.0)) * ((float4x4(float4(1.0, 0.0, 0.0, 0.0), float4(0.0, 1.0, 0.0, 0.0), float4(0.0, 0.0, 1.0, 0.0), float4(0.0, 0.0, 0.0, 1.0)) * float4(in.in_position - in.centre, 1.0)) + float4(in.centre, 0.0));
    #line 44 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
        out.texture_coord_out = in.texture_coord;
        return out;
    }
    
*/
static const char vs_source_metal_macos[1064] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,
    0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,
    0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x69,
    0x6e,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,0x65,0x6e,0x74,0x72,0x65,0x20,0x5b,
    0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x34,0x20,0x22,0x2f,0x72,0x75,0x6e,0x2f,0x6d,
    0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,0x6e,0x64,0x20,0x44,
    0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x64,0x65,0x6d,
    0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,
    0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,0x67,0x6c,0x73,0x6c,
    0x22,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,
    0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x28,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x30,0x2e,0x30,0x30,0x32,0x33,0x36,0x36,0x38,0x37,0x39,0x32,0x35,
    0x36,0x34,0x34,0x32,0x31,0x38,0x39,0x32,0x31,0x36,0x36,0x31,0x33,0x37,0x36,0x39,
    0x35,0x33,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,
    0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,
    0x30,0x2c,0x20,0x2d,0x30,0x2e,0x30,0x30,0x34,0x32,0x30,0x37,0x34,0x36,0x32,0x30,
    0x37,0x32,0x33,0x37,0x32,0x34,0x33,0x36,0x35,0x32,0x33,0x34,0x33,0x37,0x35,0x2c,
    0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x2d,
    0x30,0x2e,0x36,0x30,0x35,0x37,0x37,0x34,0x32,0x32,0x33,0x38,0x30,0x34,0x34,0x37,
    0x33,0x38,0x37,0x36,0x39,0x35,0x33,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x38,0x30,
    0x37,0x36,0x39,0x38,0x39,0x36,0x35,0x30,0x37,0x32,0x36,0x33,0x31,0x38,0x33,0x35,
    0x39,0x33,0x37,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,
    0x20,0x2a,0x20,0x28,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x28,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,
    0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x28,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,
    0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,
    0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x69,0x6e,0x5f,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x2d,0x20,0x69,0x6e,0x2e,0x63,0x65,0x6e,0x74,0x72,
    0x65,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x69,0x6e,0x2e,0x63,0x65,0x6e,0x74,0x72,0x65,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x34,0x20,0x22,0x2f,0x72,
    0x75,0x6e,0x2f,0x6d,0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,
    0x6e,0x64,0x20,0x44,0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,
    0x2f,0x64,0x65,0x6d,0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,0x73,
    0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x20,
    0x3d,0x20,0x69,0x6e,0x2e,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,
    0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,
    0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct fs_params
    {
        float4 col_border;
        float4 bullshit;
    };
    
    struct main0_out
    {
        float4 color [[color(0)]];
    };
    
    struct main0_in
    {
        float2 texture_coord_out [[user(locn0)]];
    };
    
    #line 16 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
    fragment main0_out main0(main0_in in [[stage_in]], constant fs_params& _24 [[buffer(0)]], texture2d<float> texture_in [[texture(0)]], sampler texture_inSmplr [[sampler(0)]])
    {
        main0_out out = {};
    #line 16 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
    #line 17 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
        out.color = (texture_in.sample(texture_inSmplr, in.texture_coord_out) * _24.bullshit.x) * _24.col_border;
        return out;
    }
    
*/
static const char fs_source_metal_macos[837] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x66,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x5f,0x62,0x6f,0x72,0x64,0x65,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x62,0x75,0x6c,
    0x6c,0x73,0x68,0x69,0x74,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,
    0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,
    0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x20,
    0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x36,0x20,0x22,0x2f,
    0x72,0x75,0x6e,0x2f,0x6d,0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,
    0x32,0x6e,0x64,0x20,0x44,0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,
    0x73,0x2f,0x64,0x65,0x6d,0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,
    0x73,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,
    0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,
    0x6e,0x74,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,
    0x34,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x2c,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,
    0x3e,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6e,0x20,0x5b,0x5b,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6e,0x53,
    0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x30,
    0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x31,0x36,0x20,0x22,0x2f,0x72,0x75,0x6e,0x2f,0x6d,0x65,
    0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,0x6e,0x64,0x20,0x44,0x69,
    0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x64,0x65,0x6d,0x65,
    0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,0x64,
    0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,0x67,0x6c,0x73,0x6c,0x22,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x37,0x20,0x22,0x2f,0x72,0x75,0x6e,0x2f,
    0x6d,0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,0x6e,0x64,0x20,
    0x44,0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x64,0x65,
    0x6d,0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,
    0x61,0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,0x67,0x6c,0x73,
    0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6e,0x2e,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6e,
    0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x69,0x6e,0x2e,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x29,0x20,0x2a,0x20,0x5f,
    0x32,0x34,0x2e,0x62,0x75,0x6c,0x6c,0x73,0x68,0x69,0x74,0x2e,0x78,0x29,0x20,0x2a,
    0x20,0x5f,0x32,0x34,0x2e,0x63,0x6f,0x6c,0x5f,0x62,0x6f,0x72,0x64,0x65,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float2 texture_coord_out [[user(locn0)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float3 in_position [[attribute(0)]];
        float3 centre [[attribute(1)]];
        float2 texture_coord [[attribute(2)]];
    };
    
    #line 44 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
    vertex main0_out main0(main0_in in [[stage_in]])
    {
        main0_out out = {};
        out.gl_Position = float4x4(float4(0.00236687925644218921661376953125, 0.0, 0.0, 0.0), float4(0.0, -0.0042074620723724365234375, 0.0, 0.0), float4(0.0, 0.0, 1.0, 0.0), float4(-0.605774223804473876953125, 0.8076989650726318359375, 0.0, 1.0)) * ((float4x4(float4(1.0, 0.0, 0.0, 0.0), float4(0.0, 1.0, 0.0, 0.0), float4(0.0, 0.0, 1.0, 0.0), float4(0.0, 0.0, 0.0, 1.0)) * float4(in.in_position - in.centre, 1.0)) + float4(in.centre, 0.0));
    #line 44 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
        out.texture_coord_out = in.texture_coord;
        return out;
    }
    
*/
static const char vs_source_metal_ios[1064] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,
    0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,
    0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x69,
    0x6e,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,0x65,0x6e,0x74,0x72,0x65,0x20,0x5b,
    0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x34,0x20,0x22,0x2f,0x72,0x75,0x6e,0x2f,0x6d,
    0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,0x6e,0x64,0x20,0x44,
    0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x64,0x65,0x6d,
    0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,
    0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,0x67,0x6c,0x73,0x6c,
    0x22,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,
    0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x28,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x30,0x2e,0x30,0x30,0x32,0x33,0x36,0x36,0x38,0x37,0x39,0x32,0x35,
    0x36,0x34,0x34,0x32,0x31,0x38,0x39,0x32,0x31,0x36,0x36,0x31,0x33,0x37,0x36,0x39,
    0x35,0x33,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,
    0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,
    0x30,0x2c,0x20,0x2d,0x30,0x2e,0x30,0x30,0x34,0x32,0x30,0x37,0x34,0x36,0x32,0x30,
    0x37,0x32,0x33,0x37,0x32,0x34,0x33,0x36,0x35,0x32,0x33,0x34,0x33,0x37,0x35,0x2c,
    0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x2d,
    0x30,0x2e,0x36,0x30,0x35,0x37,0x37,0x34,0x32,0x32,0x33,0x38,0x30,0x34,0x34,0x37,
    0x33,0x38,0x37,0x36,0x39,0x35,0x33,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x38,0x30,
    0x37,0x36,0x39,0x38,0x39,0x36,0x35,0x30,0x37,0x32,0x36,0x33,0x31,0x38,0x33,0x35,
    0x39,0x33,0x37,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,
    0x20,0x2a,0x20,0x28,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x28,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,
    0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x28,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,
    0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,
    0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x69,0x6e,0x5f,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x2d,0x20,0x69,0x6e,0x2e,0x63,0x65,0x6e,0x74,0x72,
    0x65,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x69,0x6e,0x2e,0x63,0x65,0x6e,0x74,0x72,0x65,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x34,0x20,0x22,0x2f,0x72,
    0x75,0x6e,0x2f,0x6d,0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,
    0x6e,0x64,0x20,0x44,0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,
    0x2f,0x64,0x65,0x6d,0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,0x73,
    0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x20,
    0x3d,0x20,0x69,0x6e,0x2e,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,
    0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,
    0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct fs_params
    {
        float4 col_border;
        float4 bullshit;
    };
    
    struct main0_out
    {
        float4 color [[color(0)]];
    };
    
    struct main0_in
    {
        float2 texture_coord_out [[user(locn0)]];
    };
    
    #line 16 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
    fragment main0_out main0(main0_in in [[stage_in]], constant fs_params& _24 [[buffer(0)]], texture2d<float> texture_in [[texture(0)]], sampler texture_inSmplr [[sampler(0)]])
    {
        main0_out out = {};
    #line 16 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
    #line 17 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
        out.color = (texture_in.sample(texture_inSmplr, in.texture_coord_out) * _24.bullshit.x) * _24.col_border;
        return out;
    }
    
*/
static const char fs_source_metal_ios[837] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x66,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x5f,0x62,0x6f,0x72,0x64,0x65,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x62,0x75,0x6c,
    0x6c,0x73,0x68,0x69,0x74,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,
    0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,
    0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x20,
    0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x36,0x20,0x22,0x2f,
    0x72,0x75,0x6e,0x2f,0x6d,0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,
    0x32,0x6e,0x64,0x20,0x44,0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,
    0x73,0x2f,0x64,0x65,0x6d,0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,
    0x73,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,
    0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,
    0x6e,0x74,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,
    0x34,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x2c,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,
    0x3e,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6e,0x20,0x5b,0x5b,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6e,0x53,
    0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x30,
    0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x31,0x36,0x20,0x22,0x2f,0x72,0x75,0x6e,0x2f,0x6d,0x65,
    0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,0x6e,0x64,0x20,0x44,0x69,
    0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x64,0x65,0x6d,0x65,
    0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,0x64,
    0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,0x67,0x6c,0x73,0x6c,0x22,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x37,0x20,0x22,0x2f,0x72,0x75,0x6e,0x2f,
    0x6d,0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,0x6e,0x64,0x20,
    0x44,0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x64,0x65,
    0x6d,0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,
    0x61,0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,0x67,0x6c,0x73,
    0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6e,0x2e,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6e,
    0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x69,0x6e,0x2e,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x29,0x20,0x2a,0x20,0x5f,
    0x32,0x34,0x2e,0x62,0x75,0x6c,0x6c,0x73,0x68,0x69,0x74,0x2e,0x78,0x29,0x20,0x2a,
    0x20,0x5f,0x32,0x34,0x2e,0x63,0x6f,0x6c,0x5f,0x62,0x6f,0x72,0x64,0x65,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float2 texture_coord_out [[user(locn0)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float3 in_position [[attribute(0)]];
        float3 centre [[attribute(1)]];
        float2 texture_coord [[attribute(2)]];
    };
    
    #line 44 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
    vertex main0_out main0(main0_in in [[stage_in]])
    {
        main0_out out = {};
        out.gl_Position = float4x4(float4(0.00236687925644218921661376953125, 0.0, 0.0, 0.0), float4(0.0, -0.0042074620723724365234375, 0.0, 0.0), float4(0.0, 0.0, 1.0, 0.0), float4(-0.605774223804473876953125, 0.8076989650726318359375, 0.0, 1.0)) * ((float4x4(float4(1.0, 0.0, 0.0, 0.0), float4(0.0, 1.0, 0.0, 0.0), float4(0.0, 0.0, 1.0, 0.0), float4(0.0, 0.0, 0.0, 1.0)) * float4(in.in_position - in.centre, 1.0)) + float4(in.centre, 0.0));
    #line 44 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
        out.texture_coord_out = in.texture_coord;
        return out;
    }
    
*/
static const char vs_source_metal_sim[1064] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,
    0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,
    0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x69,
    0x6e,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,0x65,0x6e,0x74,0x72,0x65,0x20,0x5b,
    0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x34,0x20,0x22,0x2f,0x72,0x75,0x6e,0x2f,0x6d,
    0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,0x6e,0x64,0x20,0x44,
    0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x64,0x65,0x6d,
    0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,
    0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,0x67,0x6c,0x73,0x6c,
    0x22,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,
    0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x28,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x30,0x2e,0x30,0x30,0x32,0x33,0x36,0x36,0x38,0x37,0x39,0x32,0x35,
    0x36,0x34,0x34,0x32,0x31,0x38,0x39,0x32,0x31,0x36,0x36,0x31,0x33,0x37,0x36,0x39,
    0x35,0x33,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,
    0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,
    0x30,0x2c,0x20,0x2d,0x30,0x2e,0x30,0x30,0x34,0x32,0x30,0x37,0x34,0x36,0x32,0x30,
    0x37,0x32,0x33,0x37,0x32,0x34,0x33,0x36,0x35,0x32,0x33,0x34,0x33,0x37,0x35,0x2c,
    0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x2d,
    0x30,0x2e,0x36,0x30,0x35,0x37,0x37,0x34,0x32,0x32,0x33,0x38,0x30,0x34,0x34,0x37,
    0x33,0x38,0x37,0x36,0x39,0x35,0x33,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x38,0x30,
    0x37,0x36,0x39,0x38,0x39,0x36,0x35,0x30,0x37,0x32,0x36,0x33,0x31,0x38,0x33,0x35,
    0x39,0x33,0x37,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,
    0x20,0x2a,0x20,0x28,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x28,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,
    0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x28,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,
    0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,
    0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x69,0x6e,0x5f,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x2d,0x20,0x69,0x6e,0x2e,0x63,0x65,0x6e,0x74,0x72,
    0x65,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x69,0x6e,0x2e,0x63,0x65,0x6e,0x74,0x72,0x65,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x34,0x20,0x22,0x2f,0x72,
    0x75,0x6e,0x2f,0x6d,0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,
    0x6e,0x64,0x20,0x44,0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,
    0x2f,0x64,0x65,0x6d,0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,0x73,
    0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x20,
    0x3d,0x20,0x69,0x6e,0x2e,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,
    0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,
    0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct fs_params
    {
        float4 col_border;
        float4 bullshit;
    };
    
    struct main0_out
    {
        float4 color [[color(0)]];
    };
    
    struct main0_in
    {
        float2 texture_coord_out [[user(locn0)]];
    };
    
    #line 16 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
    fragment main0_out main0(main0_in in [[stage_in]], constant fs_params& _24 [[buffer(0)]], texture2d<float> texture_in [[texture(0)]], sampler texture_inSmplr [[sampler(0)]])
    {
        main0_out out = {};
    #line 16 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
    #line 17 "/run/media/junko/2nd Disk/Projects/dementia/assets/shaders/slider.glsl"
        out.color = (texture_in.sample(texture_inSmplr, in.texture_coord_out) * _24.bullshit.x) * _24.col_border;
        return out;
    }
    
*/
static const char fs_source_metal_sim[837] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x66,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x5f,0x62,0x6f,0x72,0x64,0x65,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x62,0x75,0x6c,
    0x6c,0x73,0x68,0x69,0x74,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,
    0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,
    0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x20,
    0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x36,0x20,0x22,0x2f,
    0x72,0x75,0x6e,0x2f,0x6d,0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,
    0x32,0x6e,0x64,0x20,0x44,0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,
    0x73,0x2f,0x64,0x65,0x6d,0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,
    0x73,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,
    0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,
    0x6e,0x74,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,
    0x34,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x2c,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,
    0x3e,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6e,0x20,0x5b,0x5b,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6e,0x53,
    0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x30,
    0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x31,0x36,0x20,0x22,0x2f,0x72,0x75,0x6e,0x2f,0x6d,0x65,
    0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,0x6e,0x64,0x20,0x44,0x69,
    0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x64,0x65,0x6d,0x65,
    0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,0x61,0x64,
    0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,0x67,0x6c,0x73,0x6c,0x22,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x37,0x20,0x22,0x2f,0x72,0x75,0x6e,0x2f,
    0x6d,0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,0x6e,0x64,0x20,
    0x44,0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x64,0x65,
    0x6d,0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,0x68,
    0x61,0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,0x67,0x6c,0x73,
    0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6e,0x2e,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x6e,
    0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x69,0x6e,0x2e,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x29,0x20,0x2a,0x20,0x5f,
    0x32,0x34,0x2e,0x62,0x75,0x6c,0x6c,0x73,0x68,0x69,0x74,0x2e,0x78,0x29,0x20,0x2a,
    0x20,0x5f,0x32,0x34,0x2e,0x63,0x6f,0x6c,0x5f,0x62,0x6f,0x72,0x64,0x65,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 450
    
    layout(location = 0) in vec3 in_position;
    layout(location = 1) in vec3 centre;
    layout(location = 0) out vec2 texture_coord_out;
    layout(location = 2) in vec2 texture_coord;
    
    void main()
    {
        gl_Position = mat4(vec4(0.00236687925644218921661376953125, 0.0, 0.0, 0.0), vec4(0.0, -0.0042074620723724365234375, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(-0.605774223804473876953125, 0.8076989650726318359375, 0.0, 1.0)) * ((mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)) * vec4(in_position - centre, 1.0)) + vec4(centre, 0.0));
        texture_coord_out = texture_coord;
    }
    
*/
static const uint8_t vs_bytecode_wgpu[1944] = {
    0x03,0x02,0x23,0x07,0x00,0x00,0x01,0x00,0x08,0x00,0x08,0x00,0x3d,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x11,0x00,0x02,0x00,0x01,0x00,0x00,0x00,0x0b,0x00,0x06,0x00,
    0x02,0x00,0x00,0x00,0x47,0x4c,0x53,0x4c,0x2e,0x73,0x74,0x64,0x2e,0x34,0x35,0x30,
    0x00,0x00,0x00,0x00,0x0e,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x0f,0x00,0x0a,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x6d,0x61,0x69,0x6e,
    0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x24,0x00,0x00,0x00,0x26,0x00,0x00,0x00,
    0x39,0x00,0x00,0x00,0x3b,0x00,0x00,0x00,0x07,0x00,0x03,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x07,0x00,0x14,0x00,0x07,0x00,0x00,0x00,0x2f,0x72,0x75,0x6e,
    0x2f,0x6d,0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,0x6e,0x64,
    0x20,0x44,0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x64,
    0x65,0x6d,0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,
    0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,0x67,0x6c,
    0x73,0x6c,0x00,0x00,0x03,0x00,0x37,0x00,0x02,0x00,0x00,0x00,0xc2,0x01,0x00,0x00,
    0x01,0x00,0x00,0x00,0x2f,0x2f,0x20,0x4f,0x70,0x4d,0x6f,0x64,0x75,0x6c,0x65,0x50,
    0x72,0x6f,0x63,0x65,0x73,0x73,0x65,0x64,0x20,0x63,0x6c,0x69,0x65,0x6e,0x74,0x20,
    0x76,0x75,0x6c,0x6b,0x61,0x6e,0x31,0x30,0x30,0x0a,0x2f,0x2f,0x20,0x4f,0x70,0x4d,
    0x6f,0x64,0x75,0x6c,0x65,0x50,0x72,0x6f,0x63,0x65,0x73,0x73,0x65,0x64,0x20,0x63,
    0x6c,0x69,0x65,0x6e,0x74,0x20,0x6f,0x70,0x65,0x6e,0x67,0x6c,0x31,0x30,0x30,0x0a,
    0x2f,0x2f,0x20,0x4f,0x70,0x4d,0x6f,0x64,0x75,0x6c,0x65,0x50,0x72,0x6f,0x63,0x65,
    0x73,0x73,0x65,0x64,0x20,0x74,0x61,0x72,0x67,0x65,0x74,0x2d,0x65,0x6e,0x76,0x20,
    0x76,0x75,0x6c,0x6b,0x61,0x6e,0x31,0x2e,0x30,0x0a,0x2f,0x2f,0x20,0x4f,0x70,0x4d,
    0x6f,0x64,0x75,0x6c,0x65,0x50,0x72,0x6f,0x63,0x65,0x73,0x73,0x65,0x64,0x20,0x74,
    0x61,0x72,0x67,0x65,0x74,0x2d,0x65,0x6e,0x76,0x20,0x6f,0x70,0x65,0x6e,0x67,0x6c,
    0x0a,0x2f,0x2f,0x20,0x4f,0x70,0x4d,0x6f,0x64,0x75,0x6c,0x65,0x50,0x72,0x6f,0x63,
    0x65,0x73,0x73,0x65,0x64,0x20,0x65,0x6e,0x74,0x72,0x79,0x2d,0x70,0x6f,0x69,0x6e,
    0x74,0x20,0x6d,0x61,0x69,0x6e,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x0a,0x00,
    0x05,0x00,0x04,0x00,0x05,0x00,0x00,0x00,0x6d,0x61,0x69,0x6e,0x00,0x00,0x00,0x00,
    0x05,0x00,0x06,0x00,0x0d,0x00,0x00,0x00,0x67,0x6c,0x5f,0x50,0x65,0x72,0x56,0x65,
    0x72,0x74,0x65,0x78,0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,0x0d,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x00,
    0x06,0x00,0x07,0x00,0x0d,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x67,0x6c,0x5f,0x50,
    0x6f,0x69,0x6e,0x74,0x53,0x69,0x7a,0x65,0x00,0x00,0x00,0x00,0x06,0x00,0x07,0x00,
    0x0d,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x67,0x6c,0x5f,0x43,0x6c,0x69,0x70,0x44,
    0x69,0x73,0x74,0x61,0x6e,0x63,0x65,0x00,0x06,0x00,0x07,0x00,0x0d,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x67,0x6c,0x5f,0x43,0x75,0x6c,0x6c,0x44,0x69,0x73,0x74,0x61,
    0x6e,0x63,0x65,0x00,0x05,0x00,0x03,0x00,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x05,0x00,0x05,0x00,0x24,0x00,0x00,0x00,0x69,0x6e,0x5f,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x00,0x05,0x00,0x04,0x00,0x26,0x00,0x00,0x00,0x63,0x65,0x6e,0x74,
    0x72,0x65,0x00,0x00,0x05,0x00,0x07,0x00,0x39,0x00,0x00,0x00,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x00,0x00,0x00,
    0x05,0x00,0x06,0x00,0x3b,0x00,0x00,0x00,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x63,0x6f,0x6f,0x72,0x64,0x00,0x00,0x00,0x48,0x00,0x05,0x00,0x0d,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x05,0x00,
    0x0d,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x48,0x00,0x05,0x00,0x0d,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x48,0x00,0x05,0x00,0x0d,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x0b,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x47,0x00,0x03,0x00,0x0d,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x47,0x00,0x04,0x00,0x24,0x00,0x00,0x00,0x1e,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x47,0x00,0x04,0x00,0x26,0x00,0x00,0x00,0x1e,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x47,0x00,0x04,0x00,0x39,0x00,0x00,0x00,0x1e,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x47,0x00,0x04,0x00,0x3b,0x00,0x00,0x00,0x1e,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x13,0x00,0x02,0x00,0x03,0x00,0x00,0x00,0x21,0x00,0x03,0x00,
    0x04,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x16,0x00,0x03,0x00,0x08,0x00,0x00,0x00,
    0x20,0x00,0x00,0x00,0x17,0x00,0x04,0x00,0x09,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x04,0x00,0x00,0x00,0x15,0x00,0x04,0x00,0x0a,0x00,0x00,0x00,0x20,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x2b,0x00,0x04,0x00,0x0a,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x1c,0x00,0x04,0x00,0x0c,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x0b,0x00,0x00,0x00,0x1e,0x00,0x06,0x00,0x0d,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x20,0x00,0x04,0x00,
    0x0e,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x3b,0x00,0x04,0x00,
    0x0e,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x15,0x00,0x04,0x00,
    0x10,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x2b,0x00,0x04,0x00,
    0x10,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x04,0x00,
    0x12,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x2b,0x00,0x04,0x00,
    0x08,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0xa5,0x1d,0x1b,0x3b,0x2b,0x00,0x04,0x00,
    0x08,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2c,0x00,0x07,0x00,
    0x09,0x00,0x00,0x00,0x15,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0x14,0x00,0x00,0x00,
    0x14,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2b,0x00,0x04,0x00,0x08,0x00,0x00,0x00,
    0x16,0x00,0x00,0x00,0xc0,0xde,0x89,0xbb,0x2c,0x00,0x07,0x00,0x09,0x00,0x00,0x00,
    0x17,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x16,0x00,0x00,0x00,0x14,0x00,0x00,0x00,
    0x14,0x00,0x00,0x00,0x2b,0x00,0x04,0x00,0x08,0x00,0x00,0x00,0x18,0x00,0x00,0x00,
    0x00,0x00,0x80,0x3f,0x2c,0x00,0x07,0x00,0x09,0x00,0x00,0x00,0x19,0x00,0x00,0x00,
    0x14,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x14,0x00,0x00,0x00,
    0x2b,0x00,0x04,0x00,0x08,0x00,0x00,0x00,0x1a,0x00,0x00,0x00,0x05,0x14,0x1b,0xbf,
    0x2b,0x00,0x04,0x00,0x08,0x00,0x00,0x00,0x1b,0x00,0x00,0x00,0x5c,0xc5,0x4e,0x3f,
    0x2c,0x00,0x07,0x00,0x09,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x1a,0x00,0x00,0x00,
    0x1b,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x2c,0x00,0x07,0x00,
    0x12,0x00,0x00,0x00,0x1d,0x00,0x00,0x00,0x15,0x00,0x00,0x00,0x17,0x00,0x00,0x00,
    0x19,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x2c,0x00,0x07,0x00,0x09,0x00,0x00,0x00,
    0x1e,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x14,0x00,0x00,0x00,
    0x14,0x00,0x00,0x00,0x2c,0x00,0x07,0x00,0x09,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,
    0x14,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x14,0x00,0x00,0x00,
    0x2c,0x00,0x07,0x00,0x09,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x14,0x00,0x00,0x00,
    0x14,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x2c,0x00,0x07,0x00,
    0x12,0x00,0x00,0x00,0x21,0x00,0x00,0x00,0x1e,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,
    0x19,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x17,0x00,0x04,0x00,0x22,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x23,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x22,0x00,0x00,0x00,0x3b,0x00,0x04,0x00,0x23,0x00,0x00,0x00,
    0x24,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x3b,0x00,0x04,0x00,0x23,0x00,0x00,0x00,
    0x26,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x35,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x17,0x00,0x04,0x00,0x37,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x38,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x37,0x00,0x00,0x00,0x3b,0x00,0x04,0x00,0x38,0x00,0x00,0x00,
    0x39,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x3a,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x37,0x00,0x00,0x00,0x3b,0x00,0x04,0x00,0x3a,0x00,0x00,0x00,
    0x3b,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x36,0x00,0x05,0x00,0x03,0x00,0x00,0x00,
    0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xf8,0x00,0x02,0x00,
    0x06,0x00,0x00,0x00,0x08,0x00,0x04,0x00,0x07,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3d,0x00,0x04,0x00,0x22,0x00,0x00,0x00,0x25,0x00,0x00,0x00,
    0x24,0x00,0x00,0x00,0x3d,0x00,0x04,0x00,0x22,0x00,0x00,0x00,0x27,0x00,0x00,0x00,
    0x26,0x00,0x00,0x00,0x83,0x00,0x05,0x00,0x22,0x00,0x00,0x00,0x28,0x00,0x00,0x00,
    0x25,0x00,0x00,0x00,0x27,0x00,0x00,0x00,0x51,0x00,0x05,0x00,0x08,0x00,0x00,0x00,
    0x29,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x51,0x00,0x05,0x00,
    0x08,0x00,0x00,0x00,0x2a,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x51,0x00,0x05,0x00,0x08,0x00,0x00,0x00,0x2b,0x00,0x00,0x00,0x28,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x50,0x00,0x07,0x00,0x09,0x00,0x00,0x00,0x2c,0x00,0x00,0x00,
    0x29,0x00,0x00,0x00,0x2a,0x00,0x00,0x00,0x2b,0x00,0x00,0x00,0x18,0x00,0x00,0x00,
    0x91,0x00,0x05,0x00,0x09,0x00,0x00,0x00,0x2d,0x00,0x00,0x00,0x21,0x00,0x00,0x00,
    0x2c,0x00,0x00,0x00,0x51,0x00,0x05,0x00,0x08,0x00,0x00,0x00,0x2f,0x00,0x00,0x00,
    0x27,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x51,0x00,0x05,0x00,0x08,0x00,0x00,0x00,
    0x30,0x00,0x00,0x00,0x27,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x51,0x00,0x05,0x00,
    0x08,0x00,0x00,0x00,0x31,0x00,0x00,0x00,0x27,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x50,0x00,0x07,0x00,0x09,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x2f,0x00,0x00,0x00,
    0x30,0x00,0x00,0x00,0x31,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x81,0x00,0x05,0x00,
    0x09,0x00,0x00,0x00,0x33,0x00,0x00,0x00,0x2d,0x00,0x00,0x00,0x32,0x00,0x00,0x00,
    0x91,0x00,0x05,0x00,0x09,0x00,0x00,0x00,0x34,0x00,0x00,0x00,0x1d,0x00,0x00,0x00,
    0x33,0x00,0x00,0x00,0x41,0x00,0x05,0x00,0x35,0x00,0x00,0x00,0x36,0x00,0x00,0x00,
    0x0f,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x3e,0x00,0x03,0x00,0x36,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0x08,0x00,0x04,0x00,0x07,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3d,0x00,0x04,0x00,0x37,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,
    0x3b,0x00,0x00,0x00,0x3e,0x00,0x03,0x00,0x39,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,
    0xfd,0x00,0x01,0x00,0x38,0x00,0x01,0x00,
};
/*
    #version 450
    
    layout(set = 0, binding = 4, std140) uniform fs_params
    {
        vec4 col_border;
        vec4 bullshit;
    } _24;
    
    layout(location = 0, set = 2, binding = 0) uniform sampler2D texture_in;
    
    layout(location = 0) in vec2 texture_coord_out;
    layout(location = 0) out vec4 color;
    
    void main()
    {
        color = (texture(texture_in, texture_coord_out) * _24.bullshit.x) * _24.col_border;
    }
    
*/
static const uint8_t fs_bytecode_wgpu[1340] = {
    0x03,0x02,0x23,0x07,0x00,0x00,0x01,0x00,0x08,0x00,0x08,0x00,0x26,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x11,0x00,0x02,0x00,0x01,0x00,0x00,0x00,0x0b,0x00,0x06,0x00,
    0x02,0x00,0x00,0x00,0x47,0x4c,0x53,0x4c,0x2e,0x73,0x74,0x64,0x2e,0x34,0x35,0x30,
    0x00,0x00,0x00,0x00,0x0e,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x0f,0x00,0x07,0x00,0x04,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x6d,0x61,0x69,0x6e,
    0x00,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0x10,0x00,0x03,0x00,
    0x05,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x07,0x00,0x03,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x07,0x00,0x14,0x00,0x07,0x00,0x00,0x00,0x2f,0x72,0x75,0x6e,
    0x2f,0x6d,0x65,0x64,0x69,0x61,0x2f,0x6a,0x75,0x6e,0x6b,0x6f,0x2f,0x32,0x6e,0x64,
    0x20,0x44,0x69,0x73,0x6b,0x2f,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x2f,0x64,
    0x65,0x6d,0x65,0x6e,0x74,0x69,0x61,0x2f,0x61,0x73,0x73,0x65,0x74,0x73,0x2f,0x73,
    0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x73,0x6c,0x69,0x64,0x65,0x72,0x2e,0x67,0x6c,
    0x73,0x6c,0x00,0x00,0x03,0x00,0x37,0x00,0x02,0x00,0x00,0x00,0xc2,0x01,0x00,0x00,
    0x01,0x00,0x00,0x00,0x2f,0x2f,0x20,0x4f,0x70,0x4d,0x6f,0x64,0x75,0x6c,0x65,0x50,
    0x72,0x6f,0x63,0x65,0x73,0x73,0x65,0x64,0x20,0x63,0x6c,0x69,0x65,0x6e,0x74,0x20,
    0x76,0x75,0x6c,0x6b,0x61,0x6e,0x31,0x30,0x30,0x0a,0x2f,0x2f,0x20,0x4f,0x70,0x4d,
    0x6f,0x64,0x75,0x6c,0x65,0x50,0x72,0x6f,0x63,0x65,0x73,0x73,0x65,0x64,0x20,0x63,
    0x6c,0x69,0x65,0x6e,0x74,0x20,0x6f,0x70,0x65,0x6e,0x67,0x6c,0x31,0x30,0x30,0x0a,
    0x2f,0x2f,0x20,0x4f,0x70,0x4d,0x6f,0x64,0x75,0x6c,0x65,0x50,0x72,0x6f,0x63,0x65,
    0x73,0x73,0x65,0x64,0x20,0x74,0x61,0x72,0x67,0x65,0x74,0x2d,0x65,0x6e,0x76,0x20,
    0x76,0x75,0x6c,0x6b,0x61,0x6e,0x31,0x2e,0x30,0x0a,0x2f,0x2f,0x20,0x4f,0x70,0x4d,
    0x6f,0x64,0x75,0x6c,0x65,0x50,0x72,0x6f,0x63,0x65,0x73,0x73,0x65,0x64,0x20,0x74,
    0x61,0x72,0x67,0x65,0x74,0x2d,0x65,0x6e,0x76,0x20,0x6f,0x70,0x65,0x6e,0x67,0x6c,
    0x0a,0x2f,0x2f,0x20,0x4f,0x70,0x4d,0x6f,0x64,0x75,0x6c,0x65,0x50,0x72,0x6f,0x63,
    0x65,0x73,0x73,0x65,0x64,0x20,0x65,0x6e,0x74,0x72,0x79,0x2d,0x70,0x6f,0x69,0x6e,
    0x74,0x20,0x6d,0x61,0x69,0x6e,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x0a,0x00,
    0x05,0x00,0x04,0x00,0x05,0x00,0x00,0x00,0x6d,0x61,0x69,0x6e,0x00,0x00,0x00,0x00,
    0x05,0x00,0x04,0x00,0x0b,0x00,0x00,0x00,0x63,0x6f,0x6c,0x6f,0x72,0x00,0x00,0x00,
    0x05,0x00,0x05,0x00,0x0f,0x00,0x00,0x00,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x69,0x6e,0x00,0x00,0x05,0x00,0x07,0x00,0x13,0x00,0x00,0x00,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x6f,0x75,0x74,0x00,0x00,0x00,
    0x05,0x00,0x05,0x00,0x16,0x00,0x00,0x00,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x00,0x00,0x00,0x06,0x00,0x06,0x00,0x16,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x63,0x6f,0x6c,0x5f,0x62,0x6f,0x72,0x64,0x65,0x72,0x00,0x00,0x06,0x00,0x06,0x00,
    0x16,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x62,0x75,0x6c,0x6c,0x73,0x68,0x69,0x74,
    0x00,0x00,0x00,0x00,0x05,0x00,0x03,0x00,0x18,0x00,0x00,0x00,0x5f,0x32,0x34,0x00,
    0x47,0x00,0x04,0x00,0x0b,0x00,0x00,0x00,0x1e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x47,0x00,0x04,0x00,0x0f,0x00,0x00,0x00,0x1e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x47,0x00,0x04,0x00,0x0f,0x00,0x00,0x00,0x22,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x47,0x00,0x04,0x00,0x0f,0x00,0x00,0x00,0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x47,0x00,0x04,0x00,0x13,0x00,0x00,0x00,0x1e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x48,0x00,0x05,0x00,0x16,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x23,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x48,0x00,0x05,0x00,0x16,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x23,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x47,0x00,0x03,0x00,0x16,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x47,0x00,0x04,0x00,0x18,0x00,0x00,0x00,0x22,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x47,0x00,0x04,0x00,0x18,0x00,0x00,0x00,0x21,0x00,0x00,0x00,
    0x04,0x00,0x00,0x00,0x13,0x00,0x02,0x00,0x03,0x00,0x00,0x00,0x21,0x00,0x03,0x00,
    0x04,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x16,0x00,0x03,0x00,0x08,0x00,0x00,0x00,
    0x20,0x00,0x00,0x00,0x17,0x00,0x04,0x00,0x09,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x04,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x0a,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x09,0x00,0x00,0x00,0x3b,0x00,0x04,0x00,0x0a,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x19,0x00,0x09,0x00,0x0c,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1b,0x00,0x03,0x00,0x0d,0x00,0x00,0x00,
    0x0c,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x0e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x0d,0x00,0x00,0x00,0x3b,0x00,0x04,0x00,0x0e,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x17,0x00,0x04,0x00,0x11,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x12,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x11,0x00,0x00,0x00,0x3b,0x00,0x04,0x00,0x12,0x00,0x00,0x00,0x13,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x1e,0x00,0x04,0x00,0x16,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
    0x09,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x17,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x16,0x00,0x00,0x00,0x3b,0x00,0x04,0x00,0x17,0x00,0x00,0x00,0x18,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x15,0x00,0x04,0x00,0x19,0x00,0x00,0x00,0x20,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x2b,0x00,0x04,0x00,0x19,0x00,0x00,0x00,0x1a,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x15,0x00,0x04,0x00,0x1b,0x00,0x00,0x00,0x20,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x2b,0x00,0x04,0x00,0x1b,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x1d,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x2b,0x00,0x04,0x00,0x19,0x00,0x00,0x00,0x21,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x22,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x09,0x00,0x00,0x00,0x36,0x00,0x05,0x00,0x03,0x00,0x00,0x00,0x05,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xf8,0x00,0x02,0x00,0x06,0x00,0x00,0x00,
    0x08,0x00,0x04,0x00,0x07,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x3d,0x00,0x04,0x00,0x0d,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,
    0x3d,0x00,0x04,0x00,0x11,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x13,0x00,0x00,0x00,
    0x57,0x00,0x05,0x00,0x09,0x00,0x00,0x00,0x15,0x00,0x00,0x00,0x10,0x00,0x00,0x00,
    0x14,0x00,0x00,0x00,0x41,0x00,0x06,0x00,0x1d,0x00,0x00,0x00,0x1e,0x00,0x00,0x00,
    0x18,0x00,0x00,0x00,0x1a,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x3d,0x00,0x04,0x00,
    0x08,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,0x1e,0x00,0x00,0x00,0x8e,0x00,0x05,0x00,
    0x09,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x15,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,
    0x41,0x00,0x05,0x00,0x22,0x00,0x00,0x00,0x23,0x00,0x00,0x00,0x18,0x00,0x00,0x00,
    0x21,0x00,0x00,0x00,0x3d,0x00,0x04,0x00,0x09,0x00,0x00,0x00,0x24,0x00,0x00,0x00,
    0x23,0x00,0x00,0x00,0x85,0x00,0x05,0x00,0x09,0x00,0x00,0x00,0x25,0x00,0x00,0x00,
    0x20,0x00,0x00,0x00,0x24,0x00,0x00,0x00,0x3e,0x00,0x03,0x00,0x0b,0x00,0x00,0x00,
    0x25,0x00,0x00,0x00,0xfd,0x00,0x01,0x00,0x38,0x00,0x01,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before slider.h"
#endif
static inline const sg_shader_desc* fuck_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "in_position";
      desc.attrs[1].name = "centre";
      desc.attrs[2].name = "texture_coord";
      desc.vs.source = vs_source_glsl330;
      desc.vs.entry = "main";
      desc.fs.source = fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].uniforms[0].name = "fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 2;
      desc.fs.images[0].name = "texture_in";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "fuck_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_GLES2) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "in_position";
      desc.attrs[1].name = "centre";
      desc.attrs[2].name = "texture_coord";
      desc.vs.source = vs_source_glsl100;
      desc.vs.entry = "main";
      desc.fs.source = fs_source_glsl100;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].uniforms[0].name = "fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 2;
      desc.fs.images[0].name = "texture_in";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "fuck_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "in_position";
      desc.attrs[1].name = "centre";
      desc.attrs[2].name = "texture_coord";
      desc.vs.source = vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.fs.source = fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].uniforms[0].name = "fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 2;
      desc.fs.images[0].name = "texture_in";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "fuck_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_D3D11) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].sem_name = "TEXCOORD";
      desc.attrs[0].sem_index = 0;
      desc.attrs[1].sem_name = "TEXCOORD";
      desc.attrs[1].sem_index = 1;
      desc.attrs[2].sem_name = "TEXCOORD";
      desc.attrs[2].sem_index = 2;
      desc.vs.source = vs_source_hlsl5;
      desc.vs.d3d11_target = "vs_5_0";
      desc.vs.entry = "main";
      desc.fs.source = fs_source_hlsl5;
      desc.fs.d3d11_target = "ps_5_0";
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.images[0].name = "texture_in";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "fuck_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_METAL_MACOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = vs_source_metal_macos;
      desc.vs.entry = "main0";
      desc.fs.source = fs_source_metal_macos;
      desc.fs.entry = "main0";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.images[0].name = "texture_in";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "fuck_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_METAL_IOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = vs_source_metal_ios;
      desc.vs.entry = "main0";
      desc.fs.source = fs_source_metal_ios;
      desc.fs.entry = "main0";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.images[0].name = "texture_in";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "fuck_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_METAL_SIMULATOR) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = vs_source_metal_sim;
      desc.vs.entry = "main0";
      desc.fs.source = fs_source_metal_sim;
      desc.fs.entry = "main0";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.images[0].name = "texture_in";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "fuck_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_WGPU) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.bytecode.ptr = vs_bytecode_wgpu;
      desc.vs.bytecode.size = 1944;
      desc.vs.entry = "main";
      desc.fs.bytecode.ptr = fs_bytecode_wgpu;
      desc.fs.bytecode.size = 1340;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.images[0].name = "texture_in";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "fuck_shader";
    }
    return &desc;
  }
  return 0;
}
